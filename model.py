import os
import csv

# Directory where simulator recorded laps for training
data_dir = '/root/Desktop/data2/'

# Read each line from the log file generated by simulator
def linesFromLogAtLocation(location):
    filename = 'driving_log.csv'
    file_location = location + filename
    lines = []
    with open(file_location) as csvfile:
        reader = csv.reader(csvfile)
        next(reader)
        for line in reader:
            lines.append(line)
        return lines

# To fix the file path and map to correct location 
def fixFilePath(file_path):
    return data_dir + 'IMG/' + file_path.split('/')[-1]
  
# Reach each line and makes a list for center, left, and right camera images
# Also it reads steering angle from center camera
def parseDataFromLines(lines):
    center = []
    left = []
    right = []
    angle = []
    for line in lines:
        # fix file path for each center, left and right image location
        center.append(fixFilePath(line[0]))
        center.append(fixFilePath(line[1]))
        center.append(fixFilePath(line[2]))
        angle.append(float(line[3]))
    return center, left, right, angle

# Map angle (y-label) to center, left and right camera images (x-input)
#
# Angle Correction -    As per the lecture, we need to correct the steering angle
#                       if we want to use it as y-label for left or right camera images
def mapAngleToPaths(angles, center, left, right):
    paths = []
    paths.extend(center)
    paths.extend(left)
    paths.extend(right)
    mapped_angles = []
    mapped_angles.extend(angles)
    mapped_angles.extend([x + 0.2 for x in angles])
    mapped_angles.extend([x - 0.2 for x in angles])
    return paths, mapped_angles

import cv2
import numpy as np
import sklearn
from scipy import ndimage

# original image dimensions
ch, row, col = 3, 160, 320
batch_size = 32

# x-input generator for model
# We use this to reduce memory usage while dealing wiht thousands of images
# this keeps only the required batch in the memory
def generator(samples):
    num_samples = len(samples)
    while 1: # Loop forever so the generator never terminates
        for offset in range(0, num_samples, batch_size):
            batch_samples = samples[offset:offset+batch_size]

            images = []
            angles = []
            for image_path, angle in batch_samples:
                # using ndimage to read image in RGB format directly
                image = ndimage.imread(image_path)
                images.append(image)
                angles.append(angle)
                
                # augmentation (flip)
                images.append(np.fliplr(image))
                angles.append(-angle)

            X_train = np.array(images)
            y_train = np.array(angles)
            
            # shuffle
            yield sklearn.utils.shuffle(X_train, y_train)
            
from keras.models import Sequential
from keras.layers import Flatten, Dense, Lambda, Cropping2D, Conv2D

# From lecture, advanced training model
# using 5 Covnet
def trainingModel():
    model = Sequential()
    # Preprocess incoming data, centered around zero with small standard deviation
    model.add(Lambda(lambda x: (x/127.5) - 1., input_shape=(row, col, ch)))
    model.add(Cropping2D(cropping=((50, 20), (0,0)), input_shape=(ch, row, col)))
    
    model.add(Conv2D(filters=24, kernel_size=5, strides=(2, 2), activation='relu'))
    model.add(Conv2D(filters=36, kernel_size=5, strides=(2, 2), activation='relu'))
    model.add(Conv2D(filters=48, kernel_size=5, strides=(2, 2), activation='relu'))
    model.add(Conv2D(filters=64, kernel_size=3, strides=(1, 1), activation='relu'))
    model.add(Conv2D(filters=64, kernel_size=3, strides=(1, 1), activation='relu'))

    model.add(Flatten())
    model.add(Dense(100))
    model.add(Dense(50))
    model.add(Dense(10))
    model.add(Dense(1))
    
    return model

# Each line contains center, left, right images and steering angle from center image
lines = linesFromLogAtLocation(data_dir)
print("Number of lines: {}".format(len(lines)))
center, left, right, angles = parseDataFromLines(lines)
image_paths, angles = mapAngleToPaths(angles, center, left, right)

# bundle up paths with its corresponding angles
samples = list(zip(image_paths, angles))
print("Number of Samples: "+str(len(samples)))

from sklearn.model_selection import train_test_split
train_samples, validation_samples = train_test_split(samples, test_size=0.2)
print('Number of Training Samples: '+str(len(train_samples)))
print('Number of Validation Samples: '+str(len(validation_samples)))

# compile and train the model using the generator function
train_generator = generator(train_samples)
validation_generator = generator(validation_samples)

model = trainingModel()
model.compile(loss='mse', optimizer='adam')
model.fit_generator(train_generator, steps_per_epoch=len(train_samples)/batch_size, validation_data=validation_generator, validation_steps=len(validation_samples)/batch_size, epochs=4, verbose = 1)

# save model
model.save('model.h5')

# ### print the keys contained in the history object
# print(history_object.history.keys())

# import matplotlib.pyplot as plt

# ### plot the training and validation loss for each epoch
# plt.plot(history_object.history['loss'])
# plt.plot(history_object.history['val_loss'])
# plt.title('model mean squared error loss')
# plt.ylabel('mean squared error loss')
# plt.xlabel('epoch')
# plt.legend(['training set', 'validation set'], loc='upper right')
# plt.show()